{"version":3,"sources":["components/topbar/styles/TopbarWrapper.js","actions/index.js","components/topbar/TopbarWrapper.js","components/AuthHelperMethods.js","reducers/user.js","reducers/index.js","App.js","components/withAuth.js","components/About.js","components/login/styles/KeyFrames.js","components/login/styles/Prompt.js","components/login/Prompt.js","components/login/Signup.js","components/login/styles/Checkbox.js","components/login/Login.js","components/login/Password.js","registerServiceWorker.js","index.js"],"names":["TopbarWrapperEl","styled","div","nextTodoId","initUser","userObj","type","id","TopbarWrapper","props","state","user","Fragment","this","display_name","Component","connect","dispatch","bindActionCreators","AuthHelperMethods","domain","login","username","password","fetch","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","isTokenExpired","decode","exp","Date","now","err","console","log","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","url","options","headers","_checkStatus","response","json","status","error","Error","statusText","action","newState","text","combineReducers","store","createStore","rootReducer","withAuth","AuthComponent","Auth","confirm","loaded","setState","history","replace","_handleLogout","window","login_token","axios","defaults","common","_id","get","data","alert","userData","catch","onClick","About","PromptWrapperAnimation","keyframes","PromptTextAnimation","Wrapper","theme","mainBorder","mainBackground","mainColor","Text","h1","Link","span","defaultProps","Prompt","color","message","resendConf","resendConfirmationEmail","Signup","_handleChange","e","target","name","value","logoDeg","handleFormSubmit","preventDefault","allowSubmit","displayPrompt","email","first_name","last_name","email_validator","validate","length","confirm_password","ajaxPOST","post","prompt","disableSubmit","promptColor","push","Helmet","className","placeholder","onChange","disabled","to","CheckboxWrapper","Login","_handleCheckboxChange","stayLoggedIn","resend_conf","checked","Password","bind","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","routing","exact","path","component","App","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f0918489.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const TopbarWrapperEl = styled.div`\n    display: block;\n    background: #131929;\n    height: 50px;\n    padding-top: 5px;\n    \n    & > p {\n        color: white;\n    }\n    \n    & > input:hover {\n        cursor: pointer;\n    }\n    \n    & > label {\n        margin-left: 4px;\n        font-size: 0.85em;\n    }\n`;","let nextTodoId = 0;\nexport const updateUserDN = text => ({\n    type: 'UPDATE_DISPLAY_NAME',\n    id: nextTodoId++,\n    text\n});\n\nexport const initUser = userObj => ({\n    type: 'INIT',\n    id: nextTodoId++,\n    userObj\n});","import React, {Component} from \"react\";\nimport {connect} from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {TopbarWrapperEl} from \"./styles/TopbarWrapper\";\nimport { initUser } from '../../actions/index';\n\nconst mapStateToProps = function (state) {\n    return state;\n};\n\nconst mapDispatchToProps = function (dispatch) {\n    return bindActionCreators({\n        initUser: initUser\n    }, dispatch)\n};\n\nclass TopbarWrapper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {}\n        };\n        // this.displayPrompt = this.displayPrompt.bind(this);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.user !== state.user) {\n            return {\n                user: props.user\n            }\n        }\n        // Return null to indicate no change to state.\n        return null;\n    }\n\n    componentDidMount() {\n        //now has access to data like this.props.something, which is from store\n        //now has access to dispatch actions like this.props.getSomething\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <TopbarWrapperEl>\n                    <p>{this.state.user.display_name}</p>\n                </TopbarWrapperEl>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopbarWrapper);","import decode from 'jwt-decode';\n\nexport default class AuthHelperMethods {\n    // Initializing important variables\n    constructor(domain){\n        this.domain = domain || 'http://localhost:3000' //API Server Domain\n    }\n    login = (username, password) => {\n        \n        // Get a token from api server using the fetch api\n        return this.fetch(`/log-in`, {\n            method: 'POST',\n            body: JSON.stringify({\n                username,\n                password\n            })\n        }).then(res => {\n            \n            this.setToken(res.token) // Setting the token in localStorage\n            return Promise.resolve(res);\n        })\n    }\n    \n    loggedIn = () => {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken() // Getting token from localstorage\n\n        //The double exclamation is a way to cast the variable to a boolean, allowing you to easily check if the token exusts. \n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired = (token) => {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired.\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            console.log(\"expired check failed! Line 42: AuthService.js\");\n            return false;\n        }\n    }\n\n    setToken = (idToken) => {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken = () => {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout = () => {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getConfirm = () => {\n        // Using jwt-decode npm package to decode the token\n        let answer = decode(this.getToken());\n        console.log(\"Recieved answer!\");\n        return answer;\n    }\n\n    fetch = (url, options) => {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus = (response) => {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}","const user = (state = {}, action) => {\n    let newState = state;\n    switch (action.type) {\n        case 'LOGIN':\n            return action.user;\n        case 'UPDATE_DISPLAY_NAME':\n            newState.display_name = action.text;\n            return newState;\n        default:\n            return state\n    }\n};\n\nexport default user","import { combineReducers } from 'redux';\nimport user from './user';\n\nexport default combineReducers({\n    user\n})","import React, {Component} from 'react';\nimport axios from \"axios\";\nimport TopbarWrapper from './components/topbar/TopbarWrapper';\n\n/* Once the 'Authservice' and 'withAuth' components are created, import them into App.js */\nimport AuthHelperMethods from './components/AuthHelperMethods';\n\n// Our higher order component\nimport withAuth from './components/withAuth';\n\n// Import Redux\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nclass App extends Component {\n    Auth = new AuthHelperMethods();\n\n    _handleLogout = () => {\n        this.Auth.logout();\n        this.props.history.replace('/login');\n    };\n\n    initUser = function () {\n        // Set axios JWT\n        let token = localStorage.getItem(\"login_token\") || window.login_token; //change name?\n        if (token) {\n            // Set axios defaults to include JWT in requests\n            axios.defaults.headers.common = {'Authorization': 'Bearer ' + token};\n            console.log(\"[ App ] this.props.confirm:\", this.props.confirm);\n            console.log(\"[ App ] Fetch user data with _id: \" + this.props.confirm._id);\n            axios.get(\"/api/user\").then((response) => {\n                if (response.data && response.data.error) {\n                    // Display error message\n                    alert(response.data.error);\n                    return;\n                }\n                const userData = response.data;\n                console.log(\"[ App ] userData:\", userData);\n                store.dispatch({\n                    type: 'LOGIN',\n                    user: userData\n                });\n            }).catch(error => {\n                console.log(error)\n            });\n        } else {\n            console.log(\"[ App ] Error: No token found!\");\n            this.props.history.replace('/login');\n        }\n    };\n\n    componentWillMount() {\n        this.initUser();\n    }\n\n    // Render the protected component\n    render() {\n\n        // store.dispatch({\n        //     type: 'LOGIN',\n        //     user: {\n        //         email: this.props.confirm.email\n        //     }\n        // });\n        return (\n            <Provider store={store}>\n                <TopbarWrapper/>\n                <button onClick={this._handleLogout}>logout</button>\n            </Provider>\n        );\n    }\n}\n\n// In order for this component to be protected, we must wrap it with what we call a 'Higher Order Component' or HOC.\nexport default withAuth(App);","import React, { Component } from 'react';\nimport AuthHelperMethods from './AuthHelperMethods';\n\n/* A higher order component is frequently written as a function that returns a class. */\nexport default function withAuth(AuthComponent) {\n    \n    const Auth = new AuthHelperMethods();\n\n    return class AuthWrapped extends Component {\n        state = {\n            confirm: null,\n            loaded: false\n        }\n\n        /* In the componentDidMount, we would want to do a couple of important tasks in order to verify the current users authentication status\n        prior to granting them enterance into the app. */\n        componentDidMount() {\n            if (!Auth.loggedIn()) {\n                this.props.history.replace('/login')\n            }\n            else {\n                /* Try to get confirmation message from the Auth helper. */\n                try {\n                    \n                    const confirm = Auth.getConfirm()\n                    console.log(\"confirmation is:\", confirm);\n                    this.setState({\n                        confirm: confirm,\n                        loaded: true\n                    })\n                }\n                /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\n                catch (err) {\n                    console.log(err);\n                    Auth.logout()\n                    this.props.history.replace('/login');\n                }\n            }\n        }\n\n        render() {\n            if (this.state.loaded == true) {\n                if (this.state.confirm) {\n                    console.log(\"confirmed!\")\n                    return (\n                        /* component that is currently being wrapped(App.js) */\n                        <AuthComponent history={this.props.history} confirm={this.state.confirm} />\n                    )\n                }\n                else {\n                    console.log(\"not confirmed!\")\n                    return null\n                }\n            }\n            else {\n                return null\n            }\n\n        }\n    }\n}","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass About extends Component {\n  state = {\n    data: [],\n  };\n    render() {\n    return (\n      <div>\n          <h1>TEST</h1>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import {keyframes} from 'styled-components';\n\nexport const PromptWrapperAnimation = keyframes`\n  0% {\n     transform:scaleY(0);\n  }\n  100% {\n     transform:scaleY(1);\n  }\n`;\n\nexport const PromptTextAnimation = keyframes`\n    0% {\n        opacity: 0;\n    }\n    50% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n`;","import styled from \"styled-components\";\nimport {PromptWrapperAnimation, PromptTextAnimation} from './KeyFrames';\n\nexport const Wrapper = styled.div`\n    padding: 0 15px;\n    border-radius: 4px;\n    margin: 0 0 15px 0;\n    transform-origin: top;\n    animation: ${PromptWrapperAnimation} 0.4s ease-in-out 1 forwards;\n    border: 1px solid ${props => props.theme.mainBorder};\n    background: ${props => props.theme.mainBackground};\n    color: ${props => props.theme.mainColor};\n`;\n\nexport const Text = styled.h1`\n    font-size: 0.85em;\n    opacity: 0;\n    display: inline-block;\n    line-height: 1.3em;\n    margin: 10px 0;\n    animation: ${PromptTextAnimation} 0.4s ease-in-out 1 forwards;\n`;\n\nexport const Link = styled.span`\n    text-decoration: underline;\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\n// Set a default theme\nWrapper.defaultProps = {\n    theme: {\n        mainBorder: \"#F4485B\",\n        mainBackground: \"rgba(244,72,91,0.1)\",\n        mainColor: \"#ED3448\"\n    }\n};","import React, {Component} from \"react\";\nimport {Wrapper, Text, Link} from './styles/Prompt';\n\nexport class Prompt extends Component {\n    render() {\n        // Set default theme\n        let theme = {\n            mainBorder: \"#F4485B\",\n            mainBackground: \"rgba(244,72,91,0.1)\",\n            mainColor: \"#ED3448\"\n        };\n        // Update theme\n        if (this.props.color === \"yellow\") {\n            theme.mainBorder = \"#DFBA0A\";\n            theme.mainBackground = \"rgba(223,186,10,0.1)\";\n            theme.mainColor = \"#A88F1A\";\n        } else if (this.props.color === \"green\") {\n            theme.mainBorder = \"#14C76F\";\n            theme.mainBackground = \"rgba(20,199,111,0.1)\";\n            theme.mainColor = \"#11AF61\";\n        }\n        return (\n            <Wrapper theme={theme}>\n                <Text>{this.props.message}</Text>\n                {this.props.resendConf && this.props.resendConfirmationEmail &&\n                <Text onClick={this.props.resendConfirmationEmail}>. <Link>Resend Confirmation</Link></Text>}\n            </Wrapper>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport {Helmet} from \"react-helmet\";\nimport email_validator from \"email-validator\";\nimport Particles from 'react-particles-js';\n\n/* We want to import our 'AuthHelperMethods' component in order to send a login request */\nimport AuthHelperMethods from '../AuthHelperMethods';\nimport {Link} from 'react-router-dom';\nimport '../../css/login.css';\nimport {Prompt} from \"./Prompt\";\n\nexport default class Signup extends Component {\n    Auth = new AuthHelperMethods();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            first_name: \"\",\n            last_name: \"\",\n            password: \"\",\n            confirm_password: \"\",\n            prompt: \"\",\n            promptColor: \"red\",\n            logoDeg: 0,\n            allowSubmit: true\n        };\n    };\n\n    // Fired off every time the user enters something into the input fields\n    _handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n            logoDeg: this.state.logoDeg + 15\n        });\n    };\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        this.setState({\n            allowSubmit: false\n        });\n        this.displayPrompt(\"\");\n        const data = {\n            email: this.state.email,\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            password: this.state.password\n        };\n\n        // Perform validations\n        if (!email_validator.validate(data.email)) {\n            this.displayPrompt(\"Email is not valid\");\n        } else if (!data.first_name) {\n            this.displayPrompt(\"First name cannot be blank\");\n        } else if (!data.last_name) {\n            this.displayPrompt(\"Last name cannot be blank\");\n        } else if (!data.password) {\n            this.displayPrompt(\"Password cannot be blank\");\n        } else if (data.password.length < 8) {\n            this.displayPrompt(\"Password must be at least 8 characters\");\n        } else if (data.password !== this.state.confirm_password) {\n            this.displayPrompt(\"Passwords do not match\");\n        } else {\n\n            // All validations passed, send POST request\n            this.ajaxPOST(data);\n        }\n    };\n\n    ajaxPOST = (data) => {\n        axios.post(\"/signup\", data).then((response) => {\n            if (response.data && response.data.error) {\n                // Display error message\n                this.displayPrompt(response.data.error, null, true);\n                return;\n            }\n            // Display confirm email message\n            this.displayPrompt(\"An account activation email has been sent to \" + this.state.email + \" - Please follow the instructions on the email to activate your account. Once your email is confirmed, you may log in using the credentials provided during signup\", \"green\", true);\n        })\n    };\n\n    displayPrompt = (prompt, color, disableSubmit) => {\n        this.setState({\n            prompt: prompt,\n            promptColor: color || \"red\",\n            allowSubmit: !disableSubmit\n        });\n    };\n\n    componentDidMount() {\n        // Redirect someone who is already logged in to the protected route\n        if (this.Auth.loggedIn()) this.props.history.push('/dashboard');\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Helmet>\n                    <title>Sign Up</title>\n                </Helmet>\n                <div className=\"login-body-wrapper\">\n                    <Particles/>\n                    <div className=\"login-wrapper\">\n                        <div className=\"login-logo-wrapper\">\n                            <p><span>Sign Up</span></p>\n                        </div>\n                        <form className=\"box-form\">\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Email\"\n                                name=\"email\"\n                                type=\"text\"\n                                onChange={this._handleChange}\n                            />\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"First name\"\n                                name=\"first_name\"\n                                type=\"text\"\n                                onChange={this._handleChange}\n                            />\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Last name\"\n                                name=\"last_name\"\n                                type=\"text\"\n                                onChange={this._handleChange}\n                            />\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Password (min. 8 characters)\"\n                                name=\"password\"\n                                type=\"password\"\n                                onChange={this._handleChange}\n                            />\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Confirm Password\"\n                                name=\"confirm_password\"\n                                type=\"password\"\n                                onChange={this._handleChange}\n                            />\n                            <button className=\"form-submit\" disabled={!this.state.allowSubmit}\n                                    onClick={this.handleFormSubmit}>Create Account\n                            </button>\n                        </form>\n                        {this.state.prompt.length > 0 &&\n                        <Prompt message={this.state.prompt} color={this.state.promptColor}/>}\n                        <Link className=\"link\" to=\"/login\">Already have an account? <span\n                            className=\"link-signup\">Log In</span></Link>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}","import styled from \"styled-components\";\n\nexport const CheckboxWrapper = styled.div`\n    padding-top: 5px;\n    \n    & > input {\n        width: 18px;\n        height: 18px;\n        position: relative;\n        top: 2px;\n    }\n    \n    & > input:hover {\n        cursor: pointer;\n    }\n    \n    & > label {\n        margin-left: 4px;\n        font-size: 0.85em;\n    }\n`;","import React, { Component } from \"react\";\nimport {Helmet} from 'react-helmet';\nimport email_validator from \"email-validator\";\nimport Particles from 'react-particles-js';\nimport axios from \"axios\";\n\n// /* We want to import our 'AuthHelperMethods' component in order to send a login request */\nimport AuthHelperMethods from '../AuthHelperMethods';\nimport {Link} from 'react-router-dom';\nimport '../../css/login.css';\nimport {Prompt} from \"./Prompt\";\nimport {CheckboxWrapper} from \"./styles/Checkbox\";\n\nclass Login extends Component {\n    Auth = new AuthHelperMethods();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            stayLoggedIn: true,\n            prompt: \"\",\n            promptColor: \"\",\n            resendConf: false,\n            logoDeg: 0\n        };\n    }\n\n    // Fired off every time the user enters something into the input fields\n    _handleChange = (e) => {\n        this.setState(\n            {\n                [e.target.name]: e.target.value,\n                logoDeg: this.state.logoDeg + 15\n            }\n        );\n    };\n\n    _handleCheckboxChange = () => {\n        this.setState(\n            {\n                stayLoggedIn: !this.state.stayLoggedIn\n            }\n        );\n    };\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        this.displayPrompt(\"\");\n        /* Here is where all the login logic will go. Upon clicking the login button,\n        we would like to utilize a login method that will send our entered credentials\n        over to the server for verification. Once verified, it should store your token\n        and send you to the protected route. */\n        if (!email_validator.validate(this.state.email)) {\n            this.displayPrompt(\"Email is not valid\");\n        } else if (!this.state.password || this.state.password.length < 8) {\n            this.displayPrompt(\"Password must be at least 8 characters\");\n        } else {\n            // All validations passed, send login POST request\n            this.Auth.login(this.state.email, this.state.password, this.state.stayLoggedIn)\n                .then(res => {\n                    if (res.error) {\n                        this.displayPrompt(res.error, res.color, res.resend_conf);\n                        return;\n                    }\n                    // No error, continue to dashboard\n                    this.props.history.replace(\"/\");\n                })\n                .catch(err => {\n                    alert(err);\n                });\n        }\n    };\n\n    displayPrompt = (prompt, color, resendConf) => {\n        this.setState({\n            prompt: prompt,\n            promptColor: color || \"red\",\n            resendConf: resendConf || false\n        });\n    };\n\n    resendConfirmationEmail = () => {\n        const data = {\n            email: this.state.email\n        };\n        if (data.email && email_validator.validate(data.email)) {\n            axios.post(\"/resend_account_activation_email\", data).then((response) => {\n                if (response.data && response.data.error) {\n                    // Display error message\n                    this.displayPrompt(response.data.error);\n                    return;\n                }\n                this.displayPrompt(\"Email sent. Please check your email\", \"green\", false);\n            })\n        }\n    };\n\n    componentWillMount() {\n        // Redirect someone who is already logged in to the protected route\n        if (this.Auth.loggedIn()) this.props.history.replace('/');\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Helmet>\n                    <title>Log In</title>\n                </Helmet>\n                <div className=\"login-body-wrapper\">\n                    <Particles/>\n                    <div className=\"login-wrapper\">\n                        <div className=\"login-logo-wrapper\">\n                            {/* <img className=\"logo-img\" style={{transform: 'rotate(' + this.state.logoDeg + 'deg)'}}\n                                 src={logo} alt={\"logo\"}/> */}\n                            <p><span>Log In</span></p>\n                        </div>\n                        <form className=\"box-form\">\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Email\"\n                                name=\"email\"\n                                type=\"text\"\n                                onChange={this._handleChange}\n                            />\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Password\"\n                                name=\"password\"\n                                type=\"password\"\n                                onChange={this._handleChange}\n                            />\n                            <CheckboxWrapper>\n                                <input\n                                    name=\"stayLoggedIn\"\n                                    type=\"checkbox\"\n                                    checked={this.state.stayLoggedIn}\n                                    onChange={this._handleCheckboxChange}\n                                />\n                                <label className=\"noselect\" onClick={this._handleCheckboxChange}>Remember me</label>\n                            </CheckboxWrapper>\n                            <button className=\"form-submit\" onClick={this.handleFormSubmit}>Log In</button>\n                        </form>\n                        {this.state.prompt.length > 0 &&\n                        <Prompt message={this.state.prompt} color={this.state.promptColor}\n                                resendConf={this.state.resendConf}\n                                resendConfirmationEmail={this.resendConfirmationEmail}/>}\n                        <div><Link className=\"link\" to=\"/signup\">Don't have an account? <span>Sign Up</span></Link></div>\n                        <div><Link className=\"link\" to=\"/password\"><span>Forgot password?</span></Link></div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\nexport default Login;\n","import React, {Component} from \"react\";\nimport {Helmet} from 'react-helmet';\nimport email_validator from \"email-validator\";\nimport Particles from 'react-particles-js';\nimport {Prompt} from './Prompt';\n/* We want to import our 'AuthHelperMethods' component in order to send a login request */\nimport AuthHelperMethods from '../AuthHelperMethods';\nimport {Link} from 'react-router-dom';\nimport '../../css/login.css';\nimport axios from \"axios\";\n\nclass Password extends Component {\n    Auth = new AuthHelperMethods();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            prompt: \"\",\n            promptColor: \"\",\n            logoDeg: 0,\n            allowSubmit: true\n        };\n        this.displayPrompt = this.displayPrompt.bind(this);\n    }\n\n    // Fired off every time the user enters something into the input fields\n    _handleChange = (e) => {\n        this.setState(\n            {\n                [e.target.name]: e.target.value,\n                logoDeg: this.state.logoDeg + 15\n            }\n        );\n    };\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        this.setState({\n            allowSubmit: false\n        });\n        this.displayPrompt(\"\");\n        const data = {\n            email: this.state.email\n        };\n        if (!email_validator.validate(data.email)) {\n            this.displayPrompt(\"Email is not valid\");\n        } else {\n            // All validations passed, send POST request\n            this.ajaxPOST(data);\n        }\n    };\n\n    ajaxPOST = (data) => {\n        axios.post(\"/forgot_pw\", data).then((response) => {\n            if (response.data && response.data.error) {\n                // Display error message\n                this.displayPrompt(response.data.error);\n                return;\n            }\n            // Display check for password reset email\n            this.displayPrompt(\"A password reset email has been sent to \" + this.state.email + \" - Please follow the instructions in the email to reset your password\", \"green\", true);\n        })\n    };\n\n    displayPrompt = (prompt, color, disableSubmit) => {\n        this.setState({\n            prompt: prompt,\n            promptColor: color || \"red\",\n            allowSubmit: !disableSubmit\n        });\n    };\n\n    componentWillMount() {\n        // Redirect someone who is already logged in to the protected route\n        if (this.Auth.loggedIn()) this.props.history.replace('/');\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Helmet>\n                    <title>Password Reset</title>\n                </Helmet>\n                <div className=\"login-body-wrapper\">\n                    <Particles/>\n                    <div className=\"login-wrapper\">\n                        <div className=\"login-logo-wrapper\">\n                            <p><span>Password Reset</span></p>\n                        </div>\n                        <form className=\"box-form\">\n                            <input\n                                className=\"form-item\"\n                                placeholder=\"Email\"\n                                name=\"email\"\n                                type=\"text\"\n                                onChange={this._handleChange}\n                            />\n                            <button className=\"form-submit\" disabled={!this.state.allowSubmit}\n                                    onClick={this.handleFormSubmit}>Request Password Reset\n                            </button>\n                        </form>\n                        {this.state.prompt.length > 0 &&\n                        <Prompt message={this.state.prompt} color={this.state.promptColor}/>}\n                        <Link className=\"link\" to=\"/login\">Already have an account? <span\n                            className=\"link-signup\">Log In</span></Link>\n                        <Link className=\"link\" to=\"/signup\">Don't have an account? <span>Signup</span></Link>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\nexport default Password;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport App from './App';\nimport About from './components/About';\nimport Signup from './components/login/Signup';\nimport Login from './components/login/Login';\nimport Password from './components/login/Password';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nconst routing = (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/about\" component={About} />\n        <Route exact path=\"/signup\" component={Signup} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/password\" component={Password} />\n      </div>\n    </Router>\n);\n\nReactDOM.render(routing, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}